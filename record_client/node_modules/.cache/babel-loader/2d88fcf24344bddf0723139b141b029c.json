{"ast":null,"code":"var _jsxFileName = \"/Users/br/Code/project4/record_client/src/App.js\";\nimport React from 'react';\nimport './App.css';\nimport Records from './components/Records.js';\nimport NewRecords from './components/NewRecords.js';\nimport Update from './components/Update.js';\nimport Show from './components/Show.js';\nimport axios from 'axios';\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      records: false\n    };\n\n    this.getRecords = () => {\n      fetch('http://localhost:3000/records').then(response => response.json()).then(json => this.setState({\n        records: json\n      })).catch(error => console.error(error));\n    };\n\n    this.handleUpdate = id => {\n      // e.preventDefault();\n      // console.log(`http://localhost:3001/records/${id}`)\n      // const records = {\n      //     artist: this.state.artist,\n      //     title: this.state.title,\n      //     format: this.state.format,\n      //     label: this.state.label,\n      //     year: this.state.year\n      // };\n      const updatedRecord = [];\n      fetch('http://localhost:3000/records/' + id, {\n        body: JSON.stringify(this.state.formInputs),\n        method: 'PUT',\n        headers: {\n          'Accept': 'application/json, text/plain, */*',\n          'Content-Type': 'application/json'\n        }\n      }).then(updatedRecord => {\n        return updatedRecord.json();\n      }).then(updatedRecord => {\n        updatedRecord.push(records);\n        this.props.getRecords();\n      }).catch(error => console.log(error));\n    };\n\n    this.deleteRecord = (id, i) => {\n      fetch('http://localhost:3000/records/' + id, {\n        method: 'DELETE'\n      }).then(data => {\n        this.setState({\n          records: [...this.state.records.slice(0, i), ...this.state.records.slice(i + 1)]\n        });\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.getRecords();\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"App-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, \"A Collection of Physical Recordings\")), React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, React.createElement(React.Fragment, null, React.createElement(NewRecords, {\n      records: this.state.records,\n      getRecords: this.getRecords,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    })), React.createElement(React.Fragment, null, React.createElement(Records, {\n      deleteRecord: this.deleteRecord,\n      handleUpdate: this.handleUpdate,\n      records: this.state.records,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/br/Code/project4/record_client/src/App.js"],"names":["React","Records","NewRecords","Update","Show","axios","App","Component","state","records","getRecords","fetch","then","response","json","setState","catch","error","console","handleUpdate","id","updatedRecord","body","JSON","stringify","formInputs","method","headers","push","props","log","deleteRecord","i","data","slice","componentDidMount","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './App.css';\nimport Records from './components/Records.js'\nimport NewRecords from './components/NewRecords.js'\nimport Update from './components/Update.js'\nimport Show from './components/Show.js'\nimport axios from 'axios'\n\nclass App extends React.Component {\n  state = {\n    records: false\n  }\n  componentDidMount() {\n  this.getRecords()\n}\ngetRecords = () =>{\n  fetch('http://localhost:3000/records')\n    .then(response => response.json())\n    .then(json => this.setState({records: json}))\n    .catch(error => console.error(error))\n}\n// showRecord = (id) => {\n  // axios.get(`http://localhost:3000/records/${id}/`)\n  // .then(response => this.setState({\n  //     artist: response.data.artist,\n  //     title: response.data.title,\n  //     format: response.data.format,\n  //     label: response.data.label,\n  //     year: response.data.year\n  // }));\n// }\n\nhandleUpdate = (id) => {\n    // e.preventDefault();\n    // console.log(`http://localhost:3001/records/${id}`)\n    // const records = {\n    //     artist: this.state.artist,\n    //     title: this.state.title,\n    //     format: this.state.format,\n    //     label: this.state.label,\n    //     year: this.state.year\n    // };\n    const updatedRecord = [];\n\n    fetch('http://localhost:3000/records/' + id,\n      {\n        body: JSON.stringify(this.state.formInputs),\n        method: 'PUT',\n       headers: {\n         'Accept': 'application/json, text/plain, */*',\n         'Content-Type': 'application/json'\n       }\n      })\n     .then(updatedRecord => {\n       return updatedRecord.json()\n     })\n     .then(updatedRecord => {\n       updatedRecord.push(records);\n       this.props.getRecords()\n     })\n     .catch(error => console.log(error))\n    }\n  deleteRecord = (id, i) =>{\n    fetch('http://localhost:3000/records/' + id,\n      {\n        method: 'DELETE'\n      })\n      .then(data => {\n        this.setState({\n          records: [\n            ...this.state.records.slice(0, i),\n            ...this.state.records.slice(i + 1)\n          ]\n        })\n      })\n    }\nrender(){\n  return (\n    <div className=\"App\">\n      <div className='container'>\n      <div className=\"App-header\">\n        <h1>A Collection of Physical Recordings</h1>\n      </div>\n        <div className='row'>\n          <>\n            <NewRecords records={this.state.records} getRecords={this.getRecords} />\n          </>\n          <>\n            <Records deleteRecord={this.deleteRecord} handleUpdate={this.handleUpdate} records={this.state.records} />\n          </>\n        </div>\n      </div>\n    </div>\n  );\n}\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}